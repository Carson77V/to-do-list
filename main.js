(()=>{"use strict";let t=[];localStorage.getItem("projectTitles")?t=localStorage.getItem("projectTitles").split(","):localStorage.setItem("projectTitles",[]);const e={getTitle(){return this.title},setTitle(t){this.title=t},getDescription(){return this.description},setDescription(t){this.description=t},getDate(){return this.date},setDate(t){this.date=t},getPriority(){return this.priority},setPriority(t){this.priority=t},getProject(){return this.project},setProject(t){this.project=t}};function n(t,e){const n=document.createElement("div");n.classList.add("task"),n.classList.add("task-span");const c=document.createElement("div"),s=document.createElement("div");c.classList.add("task-start"),s.classList.add("task-end");const i=document.createElement("span");i.classList.add("task-circle"),i.addEventListener("click",(t=>{!function(t){const e=t.srcElement.parentElement.parentElement,n=e.querySelector(".task-title"),c=e.querySelector(".task-date"),s=function(t,e){const n=[];for(let e=0;e<r.length;e++)r[e].getTitle()===t&&n.push(e);const c=[];for(let t=0;t<n.length;t++)r[n[t]].getDate()==e&&c.push(n[t]);if("All"==o)return c[0];for(let t=0;t<c.length;t++)if(r[c[0]].getProject()===o)return t}(n.textContent,c.textContent);r.splice(s,1),e.remove()}(t)}));const l=document.createElement("div");l.classList.add("task-title"),l.textContent=t;const d=document.createElement("div");d.classList.add("task-date"),d.textContent=e;const a=document.createElement("img");return a.src="images/edit.svg",a.setAttribute("alt","edit button"),s.appendChild(d),s.appendChild(a),c.appendChild(i),c.appendChild(l),n.appendChild(c),n.appendChild(s),n}function c(t){const e=document.createElement("option");return e.textContent=t,e.setAttribute("value",t),e}let r=[];const s=document.querySelector(".add-task");function i(t){document.querySelectorAll(".task-span").forEach((t=>{t.remove()}));const e=r.filter((e=>{if("Today"!=t)return"Important"==t?1==e.getPriority:"All"==t||e.getProject()==t})),c=document.querySelector(".add-task"),s=document.querySelector("#tasks");e.forEach((t=>{const e=n(t.getTitle(),t.getDate());s.insertBefore(e,c)}))}s.addEventListener("click",(()=>{document.querySelector("#tasks").insertBefore(function(t,n,s,l){const d=document.createElement("div");d.classList.add("task-span"),d.classList.add("task-form");const a=document.createElement("form");a.setAttribute("action",""),a.setAttribute("method","post");const u=document.createElement("div");u.classList.add("top-form-task");const m=document.createElement("input");m.setAttribute("type","text"),m.setAttribute("id","title-edit"),m.setAttribute("placeholder","Title"),m.setAttribute("name","title-edit"),m.setAttribute("maxlength","20"),m.value=t;const p=document.createElement("div"),h=document.createElement("label");h.textContent="Date: ",h.setAttribute("for","date");const E=document.createElement("input");E.setAttribute("type","date"),E.setAttribute("id","date"),E.setAttribute("name","date"),E.value=n,p.appendChild(h),p.appendChild(E),u.appendChild(m),u.appendChild(p),a.appendChild(u);const C=document.createElement("div");C.classList.add("textarea-div");const v=document.createElement("textarea");v.setAttribute("placeholder","Description"),v.value=s,C.appendChild(v),a.appendChild(C);const b=document.createElement("div");b.classList.add("lower-form-task");const f=document.createElement("div"),A=document.createElement("label");A.textContent="Priority: ",A.setAttribute("for","priority");const y=document.createElement("select");y.setAttribute("name","priority"),y.setAttribute("id","priority"),y.value=l;for(let t=1;t<=3;t++)y.appendChild(c(t));f.appendChild(A),f.appendChild(y);const g=document.createElement("div"),L=document.createElement("button");L.textContent="Del",L.setAttribute("type","button");const k=document.createElement("button");return k.textContent="Save",k.setAttribute("type","button"),k.addEventListener("click",(t=>{!function(t){const n=t.srcElement.closest("form"),c=n.querySelector("#title-edit").value,s=n.querySelector("#date").value,l=n.querySelector("textarea").value,d=n.querySelector("#priority").value;r.push(((t,n,c,r,s)=>{let i=Object.create(e);return i.title=t,i.description=c,i.date=n,i.priority=r,i.project=s,i})(c,s,l,d,o)),i(o),n.parentElement.remove()}(t)})),g.appendChild(L),g.appendChild(k),b.appendChild(f),b.appendChild(g),a.appendChild(b),d.appendChild(a),d}(null,null,null,3),s)}));let o="All";document.querySelectorAll(".menu-item").forEach(m);const l=document.querySelector(".projects"),d=t;for(let t=0;t<d.length;t++)l.appendChild(a(d[t]));function a(e){const n=document.createElement("div");n.classList.add("menu-item");const c=document.createElement("div");c.textContent=e;const r=document.createElement("img");return r.setAttribute("src","./images/trash-2.svg"),r.setAttribute("alt","trash icon"),r.addEventListener("click",(e=>{!function(e){const n=t.indexOf(e);n>-1&&(t.splice(n,1),localStorage.setItem("projectTitles",t))}(e.srcElement.previousElementSibling.textContent),e.srcElement.closest(".menu-item").remove()})),n.appendChild(c),n.appendChild(r),m(n),n}function u(t){t.srcElement.closest(".menu-form").remove()}function m(t){t.addEventListener("click",(t=>{const e=document.querySelector(".menu-selected");null!=e&&e.classList.remove("menu-selected"),t.srcElement.classList.add("menu-selected"),o=t.srcElement.firstChild.textContent,i(o)}))}document.querySelector(".project-title > svg").addEventListener("click",(()=>{document.querySelector(".projects").appendChild(function(){const e=document.createElement("div");e.classList.add("menu-form");const n=document.createElement("form");n.setAttribute("action",""),n.setAttribute("method","post");const c=document.createElement("input");c.setAttribute("type","text"),c.setAttribute("id","project-title"),c.setAttribute("name","projectTitle"),c.setAttribute("maxlength","15");const r=document.createElement("div");r.classList.add("project-buttons");const s=document.createElement("button");s.classList.add("add-button"),s.setAttribute("type","button"),s.textContent="Add";const i=document.createElement("button");return i.classList.add("cancel-button"),i.setAttribute("type","button"),i.textContent="Cancel",s.addEventListener("click",(e=>{!function(e){const n=e.srcElement.closest(".menu-form"),c=n.firstChild.firstChild.value;var r;n.insertAdjacentElement("afterend",a(c)),r=c,t.push(r),localStorage.setItem("projectTitles",t),u(e)}(e)})),i.addEventListener("click",(t=>{u(t)})),r.appendChild(s),r.appendChild(i),n.appendChild(c),n.appendChild(r),e.appendChild(n),e}())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,