(()=>{"use strict";let t=[];localStorage.getItem("projectTitles")?t=localStorage.getItem("projectTitles").split(","):localStorage.setItem("projectTitles",[]);const e=(t,e,s,i,r,c)=>{let l=Object.create(n);return l.title=t,l.description=s,l.date=e,l.priority=i,l.project=r,l.id=c,l},n={getTitle(){return this.title},setTitle(t){this.title=t},getDescription(){return this.description},setDescription(t){this.description=t},getDate(){return this.date},setDate(t){this.date=t},getPriority(){return this.priority},setPriority(t){this.priority=t},getProject(){return this.project},setProject(t){this.project=t},getId(){return this.id},setId(t){this.id=t}};function s(t,n,s,c,o){const u=document.createElement("div");u.classList.add("task-span"),u.classList.add("task-form"),u.id=o;const m=document.createElement("form");m.setAttribute("action",""),m.setAttribute("method","post");const p=document.createElement("div");p.classList.add("top-form-task");const h=document.createElement("input");h.setAttribute("type","text"),h.setAttribute("id","title-edit"),h.setAttribute("placeholder","Title"),h.setAttribute("name","title-edit"),h.setAttribute("maxlength","20"),h.value=t;const E=document.createElement("div"),g=document.createElement("label");g.textContent="Date: ",g.setAttribute("for","date");const v=document.createElement("input");v.setAttribute("type","date"),v.setAttribute("id","date"),v.setAttribute("name","date"),v.value=n,E.appendChild(g),E.appendChild(v),p.appendChild(h),p.appendChild(E),m.appendChild(p);const b=document.createElement("div");b.classList.add("textarea-div");const C=document.createElement("textarea");C.setAttribute("placeholder","Description"),C.value=s,b.appendChild(C),m.appendChild(b);const f=document.createElement("div");f.classList.add("lower-form-task");const y=document.createElement("div"),A=document.createElement("label");A.textContent="Priority: ",A.setAttribute("for","priority");const k=document.createElement("select");k.setAttribute("name","priority"),k.setAttribute("id","priority");for(let t=3;t>=1;t--)k.appendChild(i(t));k.value=c,y.appendChild(A),y.appendChild(k);const S=document.createElement("div"),L=document.createElement("button");L.textContent="Del",L.setAttribute("type","button"),L.addEventListener("click",(t=>{d(t)}));const x=document.createElement("button");return x.textContent="Save",x.setAttribute("type","button"),x.addEventListener("click",(t=>{!function(t){const n=t.srcElement.closest(".task-form"),s=n.querySelector("#title-edit").value,i=n.querySelector("#date").value,c=n.querySelector("textarea").value,o=n.querySelector("#priority").value;let d=n.id;"null"==n.id?(d=r.length,r.push(e(s,i,c,o,a,d))):(r[+d].setTitle(s),r[+d].setDate(i),r[+d].setDescription(c),r[+d].setPriority(o)),l(a),n.remove(),localStorage.setItem("allTasks",JSON.stringify(r))}(t)})),S.appendChild(L),S.appendChild(x),f.appendChild(y),f.appendChild(S),m.appendChild(f),u.appendChild(m),u}function i(t){const e=document.createElement("option");return e.textContent=t,e.setAttribute("value",t),e}let r=[];null!=JSON.parse(localStorage.getItem("allTasks"))&&(r=JSON.parse(localStorage.getItem("allTasks")),r.forEach(((t,n)=>{r[n]=e(t.title,t.date,t.description,t.priority,t.project,t.id)}))),l("All");const c=document.querySelector(".add-task");function l(t){o();const e=r.filter((e=>"Today"==t?function(t){const e=new Date,n=t.split("-");return n[0]<e.getFullYear()||n[1]<e.getMonth()||n[2]<=e.getDate()}(e.getDate()):"Important"==t?1==e.getPriority():"All"==t||e.getProject()==t)),n=document.querySelector(".add-task"),i=document.querySelector("#tasks");e.forEach((t=>{const e=function(t,e,n,i){const c=document.createElement("div");c.classList.add("task"),c.classList.add("task-span"),c.id=n;const l=document.createElement("div"),o=document.createElement("div");l.classList.add("task-start"),o.classList.add("task-end");const a=document.createElement("span");a.classList.add("task-circle"),1==i?a.style.cssText="box-shadow: 0 0 5px rgb(255, 60, 20), inset 0 0 5px rgb(255, 60, 20)":2==i&&(a.style.cssText="box-Shadow: 0 0 5px #C9B400, inset 0 0 5px #C9B400"),a.addEventListener("click",(t=>{d(t)}));const u=document.createElement("div");u.classList.add("task-title"),u.textContent=t;const m=document.createElement("div");m.classList.add("task-date"),m.textContent=e;const p=document.createElement("img");return p.src="images/edit.svg",p.setAttribute("alt","edit button"),p.addEventListener("click",(t=>{!function(t){const e=t.srcElement.parentElement.parentElement,n=+e.id;e.insertAdjacentElement("afterend",s(r[n].getTitle(),r[n].getDate(),r[n].getDescription(),r[n].getPriority(),r[n].getId())),e.remove()}(t)})),o.appendChild(m),o.appendChild(p),l.appendChild(a),l.appendChild(u),c.appendChild(l),c.appendChild(o),c}(t.getTitle(),t.getDate(),t.getId(),t.getPriority());i.insertBefore(e,n)}))}function o(){document.querySelectorAll(".task-span").forEach((t=>{t.remove()}))}function d(t){const e=t.srcElement.parentElement.parentElement,n=+e.id;r.splice(n,1),e.remove();for(let t=0;t<r.length;t++)r[t].setId(t);o(),l(a),localStorage.setItem("allTasks",JSON.stringify(r))}c.addEventListener("click",(()=>{document.querySelector("#tasks").insertBefore(s(null,null,null,3,"null"),c)}));let a="All";document.querySelectorAll(".menu-item").forEach(E);const u=document.querySelector(".projects"),m=t;for(let t=0;t<m.length;t++)u.appendChild(p(m[t]));function p(e){const n=document.createElement("div");n.classList.add("menu-item");const s=document.createElement("div");s.textContent=e;const i=document.createElement("img");return i.setAttribute("src","./images/trash-2.svg"),i.setAttribute("alt","trash icon"),i.addEventListener("click",(e=>{!function(e){const n=t.indexOf(e);n>-1&&(t.splice(n,1),localStorage.setItem("projectTitles",t))}(e.srcElement.previousElementSibling.textContent),e.srcElement.closest(".menu-item").remove()})),n.appendChild(s),n.appendChild(i),E(n),n}function h(t){t.srcElement.closest(".menu-form").remove()}function E(t){t.addEventListener("click",(t=>{const e=document.querySelector(".menu-selected");null!=e&&e.classList.remove("menu-selected"),t.srcElement.classList.add("menu-selected");try{a=t.srcElement.firstChild.textContent}catch(t){console.log("Project Deleted")}l(a)}))}document.querySelector(".project-title > svg").addEventListener("click",(()=>{document.querySelector(".projects").appendChild(function(){const e=document.createElement("div");e.classList.add("menu-form");const n=document.createElement("form");n.setAttribute("action",""),n.setAttribute("method","post");const s=document.createElement("input");s.setAttribute("type","text"),s.setAttribute("id","project-title"),s.setAttribute("name","projectTitle"),s.setAttribute("maxlength","15");const i=document.createElement("div");i.classList.add("project-buttons");const r=document.createElement("button");r.classList.add("add-button"),r.setAttribute("type","button"),r.textContent="Add";const c=document.createElement("button");return c.classList.add("cancel-button"),c.setAttribute("type","button"),c.textContent="Cancel",r.addEventListener("click",(e=>{!function(e){const n=e.srcElement.closest(".menu-form"),s=n.firstChild.firstChild.value;var i;n.insertAdjacentElement("afterend",p(s)),i=s,t.push(i),localStorage.setItem("projectTitles",t),h(e)}(e)})),c.addEventListener("click",(t=>{h(t)})),i.appendChild(r),i.appendChild(c),n.appendChild(s),n.appendChild(i),e.appendChild(n),e}())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,