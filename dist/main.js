(()=>{"use strict";let t=[];localStorage.getItem("projectTitles")?t=localStorage.getItem("projectTitles").split(","):localStorage.setItem("projectTitles",[]);const e=(t,e,s,r,i,c)=>{let l=Object.create(n);return l.title=t,l.description=s,l.date=e,l.priority=r,l.project=i,l.id=c,l},n={getTitle(){return this.title},setTitle(t){this.title=t},getDescription(){return this.description},setDescription(t){this.description=t},getDate(){return this.date},setDate(t){this.date=t},getPriority(){return this.priority},setPriority(t){this.priority=t},getProject(){return this.project},setProject(t){this.project=t},getId(){return this.id},setId(t){this.id=t}};function s(t,n,s,c,o){const u=document.createElement("div");u.classList.add("task-span"),u.classList.add("task-form"),u.id=o;const m=document.createElement("form");m.setAttribute("action",""),m.setAttribute("method","post");const p=document.createElement("div");p.classList.add("top-form-task");const h=document.createElement("input");h.setAttribute("type","text"),h.setAttribute("id","title-edit"),h.setAttribute("placeholder","Title"),h.setAttribute("name","title-edit"),h.setAttribute("maxlength","20"),h.value=t;const E=document.createElement("div"),g=document.createElement("label");g.textContent="Date: ",g.setAttribute("for","date");const v=document.createElement("input");v.setAttribute("type","date"),v.setAttribute("id","date"),v.setAttribute("name","date"),v.value=n,E.appendChild(g),E.appendChild(v),p.appendChild(h),p.appendChild(E),m.appendChild(p);const f=document.createElement("div");f.classList.add("textarea-div");const b=document.createElement("textarea");b.setAttribute("placeholder","Description"),b.value=s,f.appendChild(b),m.appendChild(f);const C=document.createElement("div");C.classList.add("lower-form-task");const y=document.createElement("div"),A=document.createElement("label");A.textContent="Priority: ",A.setAttribute("for","priority");const k=document.createElement("select");k.setAttribute("name","priority"),k.setAttribute("id","priority");for(let t=3;t>=1;t--)k.appendChild(r(t));k.value=c,y.appendChild(A),y.appendChild(k);const L=document.createElement("div"),S=document.createElement("button");S.textContent="Del",S.setAttribute("type","button"),S.addEventListener("click",(t=>{a(t)}));const x=document.createElement("button");return x.textContent="Save",x.setAttribute("type","button"),x.addEventListener("click",(t=>{!function(t){const n=t.srcElement.closest(".task-form"),s=n.querySelector("#title-edit").value,r=n.querySelector("#date").value,c=n.querySelector("textarea").value,o=n.querySelector("#priority").value;let a=n.id;"null"==n.id?(a=i.length,i.push(e(s,r,c,o,d,a))):(i[+a].setTitle(s),i[+a].setDate(r),i[+a].setDescription(c),i[+a].setPriority(o)),l(d),n.remove(),localStorage.setItem("allTasks",JSON.stringify(i))}(t)})),L.appendChild(S),L.appendChild(x),C.appendChild(y),C.appendChild(L),m.appendChild(C),u.appendChild(m),u}function r(t){const e=document.createElement("option");return e.textContent=t,e.setAttribute("value",t),e}let i=[];null!=JSON.parse(localStorage.getItem("allTasks"))&&(i=JSON.parse(localStorage.getItem("allTasks")),i.forEach(((t,n)=>{i[n]=e(t.title,t.date,t.description,t.priority,t.project,t.id)}))),l("All");const c=document.querySelector(".add-task");function l(t){o();const e=i.filter((e=>"Today"==t?function(t){if(""==t)return!1;let e=new Date;const n=t.split("-");if(n[0]<e.getFullYear())return!0;if(n[0]==e.getFullYear()){if(n[1]<e.getMonth()+1)return!0;if(+n[1]==e.getMonth()+1&&n[2]<=e.getDate())return!0}return!1}(e.getDate()):"Important"==t?1==e.getPriority():"All"==t||e.getProject()==t)),n=document.querySelector(".add-task"),r=document.querySelector("#tasks");e.forEach((t=>{const e=function(t,e,n,r){const c=document.createElement("div");c.classList.add("task"),c.classList.add("task-span"),c.id=n;const l=document.createElement("div"),o=document.createElement("div");l.classList.add("task-start"),o.classList.add("task-end");const d=document.createElement("span");d.classList.add("task-circle"),1==r?d.style.cssText="box-shadow: 0 0 5px rgb(255, 60, 20), inset 0 0 5px rgb(255, 60, 20)":2==r&&(d.style.cssText="box-Shadow: 0 0 5px #C9B400, inset 0 0 5px #C9B400"),d.addEventListener("click",(t=>{a(t)}));const u=document.createElement("div");u.classList.add("task-title"),u.textContent=t;const m=document.createElement("div");m.classList.add("task-date"),m.textContent=e;const p=document.createElement("img");return p.src="images/edit.svg",p.setAttribute("alt","edit button"),p.addEventListener("click",(t=>{!function(t){const e=t.srcElement.parentElement.parentElement,n=+e.id;e.insertAdjacentElement("afterend",s(i[n].getTitle(),i[n].getDate(),i[n].getDescription(),i[n].getPriority(),i[n].getId())),e.remove()}(t)})),o.appendChild(m),o.appendChild(p),l.appendChild(d),l.appendChild(u),c.appendChild(l),c.appendChild(o),c}(t.getTitle(),t.getDate(),t.getId(),t.getPriority());r.insertBefore(e,n)}))}function o(){document.querySelectorAll(".task-span").forEach((t=>{t.remove()}))}function a(t){let e="";e="task-circle"==t.srcElement.classList.value?t.srcElement.parentElement.parentElement:t.srcElement.closest(".task-form");const n=+e.id;i.splice(n,1),e.remove();for(let t=0;t<i.length;t++)i[t].setId(t);localStorage.setItem("allTasks",JSON.stringify(i)),o(),l(d)}c.addEventListener("click",(()=>{document.querySelector("#tasks").insertBefore(s(null,null,null,3,"null"),c)}));let d="All";document.querySelectorAll(".menu-item").forEach(E);const u=document.querySelector(".projects"),m=t;for(let t=0;t<m.length;t++)u.appendChild(p(m[t]));function p(e){const n=document.createElement("div");n.classList.add("menu-item");const s=document.createElement("div");s.textContent=e;const r=document.createElement("img");return r.setAttribute("src","./images/trash-2.svg"),r.setAttribute("alt","trash icon"),r.addEventListener("click",(e=>{!function(e){const n=t.indexOf(e);n>-1&&(t.splice(n,1),localStorage.setItem("projectTitles",t))}(e.srcElement.previousElementSibling.textContent),e.srcElement.closest(".menu-item").remove()})),n.appendChild(s),n.appendChild(r),E(n),n}function h(t){t.srcElement.closest(".menu-form").remove()}function E(t){t.addEventListener("click",(t=>{const e=document.querySelector(".menu-selected");null!=e&&e.classList.remove("menu-selected"),t.srcElement.classList.add("menu-selected");try{d=t.srcElement.firstChild.textContent}catch(t){console.log("Project Deleted")}l(d)}))}document.querySelector(".project-title > svg").addEventListener("click",(()=>{document.querySelector(".projects").appendChild(function(){const e=document.createElement("div");e.classList.add("menu-form");const n=document.createElement("form");n.setAttribute("action",""),n.setAttribute("method","post");const s=document.createElement("input");s.setAttribute("type","text"),s.setAttribute("id","project-title"),s.setAttribute("name","projectTitle"),s.setAttribute("maxlength","15");const r=document.createElement("div");r.classList.add("project-buttons");const i=document.createElement("button");i.classList.add("add-button"),i.setAttribute("type","button"),i.textContent="Add";const c=document.createElement("button");return c.classList.add("cancel-button"),c.setAttribute("type","button"),c.textContent="Cancel",i.addEventListener("click",(e=>{!function(e){const n=e.srcElement.closest(".menu-form"),s=n.firstChild.firstChild.value;var r;n.insertAdjacentElement("afterend",p(s)),r=s,t.push(r),localStorage.setItem("projectTitles",t),h(e)}(e)})),c.addEventListener("click",(t=>{h(t)})),r.appendChild(i),r.appendChild(c),n.appendChild(s),n.appendChild(r),e.appendChild(n),e}())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,